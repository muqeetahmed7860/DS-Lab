
#include <iostream>

using namespace std;



class Stack {

private:

int* arr;

int top;

int capacity;



public:

Stack(int size = 100) {

capacity = size;

arr = new int[capacity];












top = -1;

}



~Stack() {

delete[] arr;

cout << "Stack memory deallocated." << endl;

}



bool push(int value) {

if (top >= (capacity - 1)) {

cout << "Stack Overflow" << endl;

return false;

}

arr[++top] = value;

return true;

}



int pop() {

if (top < 0) {

cout << "Stack Underflow" << endl;

return -1;

}

int value = arr[top--];

return value;




}



bool isEmpty() {

return (top < 0);

}



int peek() {

if (top < 0) {

cout << "Stack is Empty" << endl;

return -1;

}

return arr[top];

}

};



int main() {

Stack s(5);



s.push(10);

s.push(20);

s.push(30);



cout << "Popped element: " << s.pop() << endl;

cout << "Popped element: " << s.pop() << endl;





cout << "Top element is: " << s.peek() << endl;



if (s.isEmpty()) {

cout << "Stack is empty" << endl;

} else {

cout << "Stack is not empty" << endl;

}



return 0;

